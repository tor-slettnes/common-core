#!/usr/bin/python3
#===============================================================================
## @file generate_grpcstatus.py
## @brief Create mapping of gRPC status codes to symbolic names
## @author Tor Slettnes <tor@slett.net>
#===============================================================================

import re, sys, os, argparse

includedirs = ("usr/include/grpc++/impl/codegen",
               "usr/include/grpcpp/impl/codegen",
               "include/grpc++/impl/codegen",
               "include/grpcpp/impl/codegen")

inputs = [os.path.join(d, "status_code_enum.h") for d in includedirs]

class ArgParser (argparse.ArgumentParser):

    def __init__ (self, *args, **kwargs):
        argparse.ArgumentParser.__init__(self, prog=sys.argv[0], *args, **kwargs)
        self.add_argument('--output', type=str, default="/dev/stdout",
                          help='generated output file')
        self.add_argument("--mapname", type=str, default="grpc_status_names",
                          help='C++ variable name for generated map')
        self.add_argument('--sysroot', type=str, default='/',
                          help='system root in which to look for headers')
        self.add_argument('--inputs', type=str, nargs='+', default=inputs);

class ErrorTable (dict):
    rx = re.compile(r"^\s*(\w+)\s*=\s*(\d+),")

    cpp_header = (
        '// -*- c++ -*-',
        '// This file is generated by %s.'%(os.path.normpath(sys.argv[0]),),
        '',
        '#include <map>',
        '#include <string>',
        '#include <grpc++/grpc++.h>',
        ''
    )

    def __init__ (self, includedir, paths):
        for p in paths:
            abspath = os.path.join(includedir, p)
            if os.path.isfile(abspath):
                with open(abspath) as fp:
                    self.import_from(fp)

    def import_from (self, fp):
        for line in fp:
            try:
                symbol, code = self.rx.match(line).groups()
            except AttributeError:
                pass
            else:
                self[code] = symbol

    def save_to (self, path, mapname, indent=4):
        with open(path, "w") as fp:
            fp.write('\n'.join(self.cpp_header) + '\n')
            fp.write('static const std::map<grpc::StatusCode, std::string> %s =\n'
                     '{\n'%(mapname,))

            for index, code in enumerate(sorted(self)):
                sep  = ("", ",")[index < len(self)-1]
                symbol = self[code]
                entry = '%s{grpc::StatusCode::%s, "%s"}%s'%\
                    (''.ljust(indent), symbol, symbol, sep)
                fp.write("%s\n"%(entry,))

            fp.write('};\n')



if __name__ == '__main__':
    args = ArgParser().parse_args()
    table = ErrorTable(args.sysroot, args.inputs)
    table.save_to(args.output, args.mapname)
