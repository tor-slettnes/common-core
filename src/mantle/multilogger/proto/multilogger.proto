// -*- Protocol-Buffers -*-
//==============================================================================
/// @file logging.proto
/// @brief Logging interface
/// @author Tor Slettnes <tor@slett.net>
//==============================================================================

syntax = "proto3";

package cc.platform.multilogger;

import "status.proto";
import "datetime.proto";
import "variant.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service MultiLogger
{
    // Log a single message.
    rpc submit (Loggable) returns (google.protobuf.Empty);

    // Open a writable stream for continuous logging
    rpc writer (stream Loggable) returns (google.protobuf.Empty);

    // Open a readable stream for continuous monitoring.  A new log sink is
    // created on the server side to capture events on behalf of the client.
    rpc listen (ListenerSpec) returns (stream Loggable);

    // Add a new log sink to capture events meeting the specified criteria.
    rpc add_sink (SinkSpec) returns (AddSinkResult);

    // Delete an existing data contract.  This may remove corresponding log
    // sinks.
    rpc remove_sink (SinkID) returns (RemoveSinkResult);

    // Return definition for a single log sink
    rpc get_sink (SinkID) returns (SinkSpec);

    // Return defintions for all available log sinks
    rpc get_all_sinks (google.protobuf.Empty) returns (SinkSpecs);

    // Return defintions for all available log sinks
    rpc list_sinks (google.protobuf.Empty) returns (SinkNames);

    // Return defintions for all available log sinks
    rpc list_sink_types (google.protobuf.Empty) returns (SinkTypes);

    // Return a list of keys corresponding to fields log messages, more or less
    // the static field names from `Message`, below.  These can be included as
    // `contract_fields` when adding a CSV or DB sink with contract id
    // `text`.
    rpc list_message_fields (google.protobuf.Empty) returns (FieldNames);

    // Return a list of keys corresponding to fields in logged errors, more or
    // less the static field names from `cc.status.Error`. These can be included
    // as `contract_fields` when adding a CSV or DB sink with contract id
    // `error`.
    rpc list_error_fields (google.protobuf.Empty) returns (FieldNames);

}

//==============================================================================
// Loggable items

message Loggable
{
    oneof event_type
    {
        // Log message
        Message message = 8;

        // Custom attributes.
        Data data = 9;

        // Structured error data.
        cc.status.Error error = 10;
    }
}

message Message
{
    // Event text.
    string text = 1;

    // Creation time.
    google.protobuf.Timestamp timestamp = 2;

    // Severity level
    cc.status.Level level = 3;

    // Reporting host (name or address).
    string host = 4;

    // Originator, e.g., application ID
    string application = 5;

    // Log scope, e.g. `shared`, `vfs`, etc.
    string log_scope = 6;

    // Thread ID
    uint64 thread_id = 8;

    // Thread name (if any)
    string thread_name = 9;

    // Task name (e.g. coroutine task)
    string task_name = 10;

    // Source file
    string source_path = 12;

    // Source line
    uint64 source_line = 13;

    // Function name
    string function_name = 14;

    // Arbitary attributes
    cc.variant.KeyValueMap attributes = 15;
}

message Data
{
    // Contract identifier. May be used listeners (log sinks) to filter for
    // specific telemetry.  May not be `text` or `error`, as those are reserved
    // for filtering the corresponding log types.
    string contract_id = 1;

    // Creation time.
    google.protobuf.Timestamp timestamp = 2;

    // Custom attributes. These should be consistent for a given contract.
    cc.variant.KeyValueMap attributes = 3;
}

//==============================================================================
// Types related to log sinks

message SinkID
{
    string sink_id = 1;
}

message SinkSpec
{
    // Unique name for this sink
    string sink_id = 1;

    // Sink type, e.g., "text", "json", "csv", "sqlite3"...
    // Use `list_sink_types()` to get a list of available types.
    string sink_type = 2;

    // Whether this sink should be added permanently (saved to config)
    // bool permanent = 3;

    // Specific log contract.  If provided, only events with matching
    // `contract_id` will be captured by this sink.
    optional string contract_id = 4;

    // Minimum severity level to capture
    optional cc.status.Level min_level = 5;

    // Filename template, used by log sinks that write directly to files.  If
    // not provided, defaults to `{sink_id}` followed by enough date/time fields
    // to ensure a new output file at every rotation interval.
    //
    // If no suffix is provided, one is added according to `sink_type`: `.log`,
    // `.json`, `.csv`, `.db`.
    //
    // The following placeholders are expanded
    //   - '{executable}` : then name of the log server executable
    //   - `{sink_id}`    : the name of the log sink
    //   - `{isodate}`    : date formatted as "YYYY-MM-DD"
    //   - `{isotime}`    : time of day formatted as "HH:MM:SS"
    //   - `{year}`       : four-digit year
    //   - `{month}`      : two-digit month (01 - 12)
    //   - `{day}`        : two-digit day (01 - 31)
    //   - `{hour}`       : two-digit hour (00 - 23)
    //   - `{minute}`     : two-digit minute (00 - 59)
    //   - `{second}`     : two-digit second (00 - 61)
    //   - `{zonename}`   : time zone name or abbreviation (e.g., "PST")
    //   - `{zoneoffset}` : time zone offset (e.g. "+0100" or "-0700")
    //
    // The timestamp is the current time aligned according to the last nominal
    // rotation time, given `rotation_interval` above.  For instance, given a
    // six-hour rotation interval the timestamps would be truncated to 00:00,
    // 06:00, 12:00, and 18:00, local time.
    string filename_template = 8;

    // How frequently to rotate/switch log files.
    // If not provided, daily rotation is assumed.
    cc.datetime.Interval rotation_interval = 9;

    // Use local time rather than UTC for filename expansions, file rotations
    // and printable timestamps within log. Defaults to `true` if unspecified.
    optional bool use_local_time = 10;

    // Compress log files once they are no longer in active use.
    optional bool compress_after_use = 11;

    // How long to retain log files before expiration
    // Defaults to one year if not specified.
    cc.datetime.Interval expiration_interval = 12;

    // What fields from matching events to include in log. This is used by
    // column-oriented log sinks, such as CSV file output and when logging to a
    // SQLite3 database. See `ColumnSpec` below for more details.
    repeated ColumnSpec columns = 13;
}

message SinkSpecs
{
    repeated SinkSpec specs = 1;
}

message AddSinkResult
{
    bool added = 1;             // A new sink was added.
}

message RemoveSinkResult
{
    bool removed = 1;           // An existing sink was removed
}

message ColumnSpec
{
    // Representation of a single event field to capture by column-oriented log
    // sinks such as `"csv"` and `"sqlite3"`.

    // What event field to capture. Generally speaking this will be
    //   - a static field from `Message`, above,
    //   - a static field from `cc.status.Error` type, or
    //   - a dynamic field from a Data record.
    string field_name = 1;

    // How to name this column in the sink (e.g. DB column, CSV header).
    // If not provided, the `event_field` name is used.
    optional string column_name = 2;

    // Field column type. This is used by DB sinks (currently `sqlite3`) to
    // create correspondingly-typed data columns.  It is also used to interpret
    // fields such as `level` and `timestamp` in one way or another. (Note that
    // if the `"timestamp"` field set to type `COLTYPE_STRING`, the resulting
    // string value is also determined by the Sink's `use_local_time` setting).
    ColumnType column_type = 3;
}

enum ColumnType
{
    COLTYPE_NONE = 0;
    COLTYPE_BOOL = 1;
    COLTYPE_INT  = 2;
    COLTYPE_REAL = 3;
    COLTYPE_TEXT = 4;
    COLTYPE_BLOB = 5;
    COLTYPE_DATETIME = 6;
}

message SinkNames
{
    repeated string sink_names = 1;
}

message SinkTypes
{
    // A list of available sink types.
    repeated string sink_types = 1;
}

message FieldNames
{
    // A list of static field names that may be included as columns in CSV and
    // DB sinks. Log events may also include additional attributes not listed
    // here.
    repeated string field_names = 1;
}


//==============================================================================
// Types related to listeners

message ListenerSpec
{
    // ID to use when creating a log sink on the server side.
    // If not provided, the client address is used.
    string sink_id = 1;

    // Event stream: Minimum severity / logging level
    cc.status.Level min_level = 8;

    // Data stream: contract/schema ID
    optional string contract_id = 10;

    // Match only messasges from specified hosts
    repeated string hosts = 12;

    // Match only messages from specified applications.
    repeated string applications = 13;

}
