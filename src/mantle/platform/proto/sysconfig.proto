// -*- Protocol-Buffers -*-
//==============================================================================
/// @file sysconfig.proto
/// @brief Host configuration interface
/// @author Tor Slettnes <tor@slett.net>
//==============================================================================

syntax = "proto3";

package cc.platform.sysconfig;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "version.proto";
import "signal.proto";

service SysConfig
{
    //==========================================================================
    // Product information

    rpc get_product_info (google.protobuf.Empty) returns (ProductInfo);
    rpc set_serial_number (google.protobuf.StringValue) returns (google.protobuf.Empty);
    rpc set_model_name (google.protobuf.StringValue) returns (google.protobuf.Empty);

    //==========================================================================
    // Host Information

    rpc get_host_info (google.protobuf.Empty) returns (HostInfo);
    rpc set_host_name (google.protobuf.StringValue) returns (google.protobuf.Empty);

    //==========================================================================
    // Time configuration

    // Current timestamp
    rpc set_current_time (google.protobuf.Timestamp) returns (google.protobuf.Empty);
    rpc get_current_time (google.protobuf.Empty) returns (google.protobuf.Timestamp);

    // Get or set time configuration
    rpc set_time_config (TimeConfig) returns (google.protobuf.Empty);
    rpc get_time_config (google.protobuf.Empty) returns (TimeConfig);

    //==========================================================================
    // Time zone configuration

    // List time zone [areas](https://en.wikipedia.org/wiki/Tz_database#Area).
    // These are roughly: continents, oceans, or `Etc`.
    // North and South America are considered one area: `America`.
    rpc list_timezone_areas (google.protobuf.Empty) returns (TimeZoneAreas);

    // List countries, optionally within a specific area.
    // This includes countries that may also span into other areas.
    rpc list_timezone_countries (TimeZoneArea) returns (TimeZoneCountries);

    // Obtain canonical time zone specifications, optionally restricted by a
    // specific area and/or country.
    rpc list_timezone_specs (TimeZoneLocationFilter) returns (TimeZoneCanonicalSpecs);

    // Same, but as a stream rather than a single large response.
    rpc read_timezone_specs (TimeZoneLocationFilter) returns (stream TimeZoneCanonicalSpec);

    /// Return geographic information about a specific canonical timezone. If no
    /// zone name is specified, return info about the currently configured zone.
    rpc get_timezone_spec (TimeZoneCanonicalName) returns (TimeZoneCanonicalSpec);

    /// Configure the system time zone. Return the resulting applied zone
    /// information.
    rpc set_timezone (TimeZoneConfig) returns (TimeZoneInfo);

    /// Get the current timezone configuration, including canonical name and
    /// whether it is automatically being kept up to date using an external
    /// location service.
    rpc get_timezone_config (google.protobuf.Empty) returns (TimeZoneConfig);

    /// Get offset information about the specified time zone at the specified
    /// time, or the currently configured zone and/or system time if not
    /// specified. Information includes current and
    /// standard time offsets from UTC, and whether Daylight Savings Time (or
    /// Summer Time) is currently in effect.

    /// Get information about the currently applied timezone, including time
    /// offsets from UTC and whether Daylight Savings / Summer Time is currently
    /// in effect.
    rpc get_timezone_info (TimeZoneInfoRequest) returns (TimeZoneInfo);

    //==========================================================================
    // Spawn a new process, with or without capturing stdin/stdout/stderr.

    rpc invoke_sync (CommandInvocation) returns (CommandResponse);
    rpc invoke_async (CommandInvocation) returns (CommandInvocationResponse);
    rpc invoke_finish (CommandContinuation) returns (CommandResponse);
    // rpc invoke_piped (stream CommandInvocation) returns (stream CommandResponse);

    rpc reboot (google.protobuf.Empty) returns (google.protobuf.Empty);

    //==========================================================================
    // Watch for changes from server

    rpc watch (cc.signal.Filter) returns (stream Signal);
}

//==============================================================================
// Product Information

message ProductInfo
{
    string product_model = 1;
    string product_serial = 2;
    string hardware_model = 3;

    cc.version.Version release_version = 8;
    cc.version.ComponentVersions component_versions = 9;
    repeated ProductInfo subsystem_info = 15;
}

//==============================================================================
// Host Information

message HostInfo
{
    string hostname = 1;

    string os_name = 16;
    string os_version = 17;
    string os_release_flavor_short = 20;
    string os_release_flavor_long = 21;
    string os_release_version_id = 22;
    string os_release_version_name = 23;

    string machine_arch = 24;
    string machine_cpu = 25;
    string machine_name = 26;
    string machine_description = 27;
    string machine_serial = 28;
    string machine_uid = 29;
}

//==============================================================================
// Time Configuration

enum TimeSync
{
    // Synchronized to TimeSync enumeration in
    // '../cpp/services/sysconfig/base/sysconfig-time.h++'.
    TSYNC_NONE = 0;             // No settings change
    TSYNC_NTP = 1;              // Synchronization via NTP
}

message TimeConfig
{
    // Synchronization scheme (e.g. NTP)
    TimeSync synchronization = 1;

    // Server(s) with which to synchronize (e.g. "pool.ntp.org").
    // When settting, only include this to change current service(s).
    repeated string servers = 2;
}


//==============================================================================
// Time Zone Configuration

message TimeZoneAreas
{
    repeated string areas = 1;
}

message TimeZoneArea
{
    string name = 1;
}

message TimeZoneCountries
{
    repeated TimeZoneCountry countries = 1;
}

message TimeZoneCountry
{
    string code = 1;            // ISO 3166 country code, e.g., "US, "DE", ...
    string name = 2;            // English name, e.g. "United States, "Germany", ...
}

message TimeZoneLocationFilter
{
    string area = 1;            // Optional continent, ocean, or "Etc"

    oneof country               // Optional country
    {
        string country_code = 2; // ISO 3166 country code, e.g. "DE"
        string country_name = 3; // English name, e.g. "Germany"
    }
}

message TimeZoneCanonicalName
{
    // Canonical/Olson name, e.g., "Etc/UTC", "America/Los_Angeles"
    string name = 1;
}

message TimeZoneCanonicalSpecs
{
    repeated TimeZoneCanonicalSpec specs = 1;
}

message TimeZoneCanonicalSpec
{
    // Canonical name ("Olson" name), e.g. `America/Los_Angeles` or `Etc/UTC`.
    string name = 1;

    // The `Area` component of the name, e.g. `America`, `Atlantic`, `Etc`.
    string area = 2;

    // One or more countries (and possibly a region within at most one of these
    // countries) where this time zone is used
    repeated TimeZoneCountryRegion countries = 3;

    // Geographical cordinates of the canonical location. For instance the
    // coordinates of `Europe/Berlin` is that of Berlin, not any other countries
    // where it is used (e.g. Norway, Sweden, Denmark)
    int32 latitude = 6;         // Seconds north of Equator
    int32 longitude = 7;        // Seconds east of Prime Meridian
}

message TimeZoneCountryRegion
{
    TimeZoneCountry country = 1;

    // Region within country. Present only for countries with more than one timezone.
    string region = 2;
}

message TimeZoneConfig
{
    oneof optional_automatic
    {
        // Whether to use an external location service to set time zone
        // Not yet implemented.
        bool automatic = 1;
    }

    string zonename = 2;        // Canonical zone name, e.g. "America/Los_Angeles"
    string provider = 3;    // Timezone/Location service provider. TBD.
}

message TimeZoneInfoRequest
{
    // Canonical zone name.  If unspecified, use the currently configured zone.
    string canonical_zone = 1;

    // Timestamp, used to determine if DST is applicable. If unspecified, use
    // the server's current system time.
    google.protobuf.Timestamp time = 2;
}

message TimeZoneInfo
{
    /// Effective zone abbreviation, e.g.
    ///   - `PST` or `PDT` for Pacific standard/daylight time
    ///   - `CET` or `CEST` for European standard/summer time
    string shortname = 1;       // Short name, e.g. PST or PDT

    /// Current zone offset from UTC, e.g. -7 hours if zone is PDT
    google.protobuf.Duration offset = 3;

    /// Current standard zone offset from UTC, e.g. -8 hours for PST
    google.protobuf.Duration stdoffset = 4;

    /// Whether Daylight Savings Time / Summer Time is currently in effect
    bool dst = 5;
}

//==============================================================================
// Process management

message CommandInvocation
{
    string working_directory = 1;
    repeated string argv = 2;
    string stdin = 3;
}

message CommandInvocationResponse
{
    uint64 pid = 1;
}

message CommandContinuation
{
    uint64 pid = 1;
    string stdin = 2;
}

message CommandResponse
{
    string stdout = 1;
    string stderr = 2;
    int32 exit_status = 3;
}


message Signal
{
    oneof signal {

        // Emitted 1x/second based on the server's current time.
        google.protobuf.Timestamp time = 8;

        // Emitted when automatic time settings changes.
        TimeConfig time_config = 9;

        // Emitted when canonical timezone configuration changes.
        TimeZoneConfig tz_config = 10;

        // Effective zone change. Emitted when the canonical zone is updated,
        // or when daylight savings time stars or ends.
        TimeZoneInfo tz_info = 11;

        // Emitted when the server's primary host name changes
        HostInfo host_info = 14;

        // Emitted when there's a change in the product info, e.g. serial number configured
        ProductInfo product_info = 15;
    }
}
