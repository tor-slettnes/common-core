// -*- protocol-buffers -*-
//==============================================================================
/// @file demo_types.proto
/// @brief data types used in Demo application
/// @author Tor Slettnes <tor@slett.net>
//==============================================================================

syntax = "proto3";

package cc.protobuf.demo;

import "variant.proto";
import "signal.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

//==============================================================================
// Service

// Simple service to showcase command/response and event propagation
service Demo {
    // Send a greeting to other listeners
    rpc say_hello (Greeting) returns (google.protobuf.Empty);

    // Get the current time
    rpc get_current_time (google.protobuf.Empty) returns (TimeData);

    // Start streaing time updates at regular intervals
    rpc start_ticking (google.protobuf.Empty) returns (google.protobuf.Empty);

    // Stop streaming time updates
    rpc stop_ticking (google.protobuf.Empty) returns (google.protobuf.Empty);

    // Stream signals from the server
    rpc watch (cc.protobuf.signal.Filter) returns (stream Signal);
}

//==============================================================================
// Greeting

message Greeting
{
    // The mesage presented by the greeter
    string text = 1;

    // The client's unique identity. We store the last greeting from each client.
    string identity = 2;

    // The greeter's implementation type (CoreProvider, StreamingExampleClient...)
    string implementation = 3;

    // When was the greeter created?
    google.protobuf.Timestamp birth = 4;

    // Arbitrary key/value pairs associated with the greeting
    cc.protobuf.variant.ValueList data = 5;
}

//==============================================================================
// TimeData

enum Weekday
{
    SUNDAY    = 0;              // Sun's day
    MONDAY    = 1;              // Moon's day
    TUESDAY   = 2;              // TÃ½r's day
    WEDNESDAY = 3;              // Odin's day
    THURSDAY  = 4;              // Thor's day
    FRIDAY    = 5;              // Frey's day
    SATURDAY  = 6;              // Saturn's day
}

message TimeStruct
{
    uint32 year = 1;            // Year. Must be >= 1900.
    uint32 month = 2;           // Month within year, 1-12
    uint32 day = 3;             // Day within month, 1-31
    uint32 hour = 4;            // Hour within day, 0-23
    uint32 minute = 5;          // Minute within hour, 0-59
    uint32 second = 6;          // Second within minute, 0-61 (normally 0-59)
    Weekday weekday = 7;        // Enumerated day
    uint32 year_day = 8;        // Day within year, 1-366

    oneof explicit_dst {        // Ensure the DST flag is explicit, even if false
        bool is_dst = 9;        // Whether daylight savings time is in use
    };
}


message TimeData
{
    google.protobuf.Timestamp timestamp = 1; // Common timestamp
    TimeStruct local_time = 2;  // Local calendar time
    TimeStruct utc_time = 3;    // Greenwich calendar time
}

message Signal
{
    // Mapping type, one of: MAP_NONE, MAP_ADDITION, MAP_REMOVAL, MAP_UPDATE.
    // In the case of a MappingSignal (like `Greeting` below), indicates
    // whether this instance is added, updated, or removed.
    cc.protobuf.signal.MappingAction mapping_action = 1;

    // Mapping key for the item that was added/removed/updated.
    string mapping_key = 2;

    oneof signal {
        Greeting signal_greeting = 8; // Emitted whenever a client says hello
        TimeData signal_time = 9;     // Emitted once per second
    }
}
