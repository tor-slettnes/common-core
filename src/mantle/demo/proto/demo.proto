// -*- protocol-buffers -*-
//==============================================================================
/// @file demo_types.proto
/// @brief data types used in Demo application
/// @author Tor Slettnes <tor@slett.net>
//==============================================================================

syntax = "proto3";

package cc.demo;

import "datetime.proto";
import "variant.proto";
import "signal.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

//==============================================================================
// Service

// Simple service to showcase command/response and event propagation
service Demo {
    // Send a greeting to other listeners
    rpc say_hello (Greeting) returns (google.protobuf.Empty);

    // Get the current time
    rpc get_current_time (google.protobuf.Empty) returns (TimeData);

    // Start streaing time updates at regular intervals
    rpc start_ticking (google.protobuf.Empty) returns (google.protobuf.Empty);

    // Stop streaming time updates
    rpc stop_ticking (google.protobuf.Empty) returns (google.protobuf.Empty);

    // Stream signals from the server
    rpc watch (cc.signal.Filter) returns (stream Signal);
}

//==============================================================================
// Greeting

message Greeting
{
    // The mesage presented by the greeter
    string text = 1;

    // The client's unique identity. We store the last greeting from each client.
    string identity = 2;

    // The greeter's implementation type (CoreProvider, StreamingExampleClient...)
    string implementation = 3;

    // When was the greeter created?
    google.protobuf.Timestamp birth = 4;

    // Arbitrary key/value pairs associated with the greeting
    cc.variant.KeyValueMap data = 5;
}


message TimeData
{
    google.protobuf.Timestamp timestamp = 1; // Common timestamp
    cc.datetime.TimeStruct local_time = 2;   // Local calendar time
    cc.datetime.TimeStruct utc_time = 3;     // Greenwich calendar time
}


//==============================================================================
// A `Signal` message is a multiplexer for various event types from the server,
// streamed back to the client in response to a `watch()` invocation, above.
// The event stream continues indefinitely until the client cancels the call or
// disconnects.
//
// To listen for only specific event types, apply a corresponding signal filter
// as input parameter to the `watch()` call. The filter should contain a list of
// field indices to include or exclude, based on their field numbers within the
// `oneof` block below. The filter also contains a `polarity` field to indicate
// whether the listed fields are to be included (1) or excluded (0).  As such,
// an empty filter means that all events will be streamed back to the client.

message Signal
{
    // Mapping type, one of: MAP_NONE, MAP_ADDITION, MAP_UPDATE, MAP_REMOVAL.
    // In the case of a MappingSignal (like `Greeting` below), indicates
    // whether this instance is added, updated, or removed.
    cc.signal.MappingAction mapping_action = 1;

    // Mapping key for the item that was added/removed/updated.
    string mapping_key = 2;

    oneof signal {
        Greeting signal_greeting = 8; // Emitted whenever a client says hello
        TimeData signal_time = 9;     // Emitted once per second
    }
}
