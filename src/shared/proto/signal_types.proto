// -*- Protocol-Buffers -*-
//==============================================================================
/// @file signal_types.proto
/// @brief Message type and enumerations for use in signal streams
/// @author Tor Slettnes <tor@slett.net>
//==============================================================================

syntax = "proto3";

package CC.Signal;

//==============================================================================
// MappingChange

enum MappingChange
{
    // Synchronized to 'MappingChange' type in `cpp/core/thread/signaltemplate.h++'.
    MAP_NONE     = 0;  // No operation
    MAP_ADDITION = 1;  // A new item has been mapped
    MAP_REMOVAL  = 2;  // An existing item has been removed
    MAP_UPDATE   = 3;  // An existing item has bene updated
};


//==============================================================================
// Filter - Client-provided mask of signals to be streamed back from server

message Filter
{
    /// If true, the `signals` list specify signals to include in rather than
    /// than exclude from the signal stream.
    bool polarity = 1;

    /// A list of indices from the "oneof" switch in the target Signal message,
    /// corresponding to specific signals to be filtered to the client.
    ///
    /// For instance, consider the following definitions
    /// ```
    ///   package CC.Example;
    ///
    ///   service SignalExample
    ///   {
    ///     /// Watch for change signals from server.
    ///     rpc watch (CC.Signal.Filter) returns (stream Signal);
    ///   }
    ///
    ///   message Signal
    ///   {
    ///     ...
    ///     oneof signal
    ///     {
    ///        FooType foo = 9;
    ///        BarType bar = 10;
    ///        BazType baz = 11;
    ///     }
    ///   }
    /// ```
    ///
    /// Then, the following Python invocation will stream back only the signals
    /// `bar` and `baz`, but not `foo`:
    ///
    ///   >>> client_stub.watch(CC.Signal.Filter(polarity=True,
    ///                                          indices=[10, 11]))
    ///
    repeated uint32 indices = 2;
}
