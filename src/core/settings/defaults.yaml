# -*- yaml -*-
#===============================================================================
## @file defaults.yaml
## @brief Default settings shared across all applications
## @author Tor Slettnes <tor@slett.net>
#===============================================================================

# Default logging threshold; may be overridden for specific scopes.
log default: TRACE

# Override the default log level setting above for specific scopes.
log thresholds:
  shared: DEBUG
  dbus: DEBUG
  netconfig: DEBUG

# ANSI coloring for specific log levels sent to console
log styles:
  intro: ""
  text:
    trace   : "\e[38;5;244m" # dim grey
    debug   : "\e[38;5;74m"  # dim blue
    info    : "\e[34m"       # blue
    notice  : "\e[1;34m"     # bold, blue
    warning : "\e[1;33m"     # bold, yellow
    failed  : "\e[1;31m"     # bold, red
    critical: "\e[1;35m"     # bold, magenta
    fatal   : "\e[1;97;41m"  # bold, white on red
  reset: "\e[0m"

log sinks:
  # Log sinks serve as the receivers/destinations of log messages.  They record
  # the messages via various output channels, based on criteria specified here.
  #
  # Each sink has an optional threshold. If set, it will accept only messages
  # with the specified severity/log level or above.  The following level names
  # are recognized:
  #   - `NONE`             : No threshold/level restriction
  #   - `TRACE`            : Trace event for detailed troubleshooting
  #   - `DEBUG`            : Debug event for normal troubleshooting
  #   - `INFO`             : Informational event only, no error
  #   - `NOTICE`           : Important event
  #   - `WARNING`          : Abnormal event, operation continues
  #   - `FAILED` or `ERROR`: Operation failed, entity is still functional
  #   - `CRITICAL`         : Operation failed, entity is disabled
  #   - `FATAL`            : Reporting entity is disabled and cannot recover
  #
  # The following settings pertain to specific sink types.
  #
  # * Log sinks that write directly to output files include "logfile",
  #   "jsonfile", "csvfile", and "sqlite3"; their corresponding settings
  #   sections below include a `name template` which controls the name of the
  #   output files, wherein the following placeholders are expanded:
  #
  #   - `{executable}`: the stem of the executable file (like "logserver")
  #   - `{hostname}`  : the name of the host where the log file is created
  #   - `{sink_id}`   : the unique identity of the log sink
  #   - `{isodate}`   : date formatted as `YYYY-MM-DD`
  #   - `{isotime}    : time of day formatted as `HH:MM:SS`
  #   - `{year}`      : four-digit year
  #   - `{month}`     : two-digit month (01 - 12)
  #   - `{day}`       : two-digit day (01 - 31)
  #   - `{hour}`      : two-digit hour (00 - 23)
  #   - `{minute}`    : two-digit minute (00 - 59)
  #   - `{second}`    : two-digit second (00 - 61)
  #   - `{zonename}`  : time zone name or abbreviation (e.g., `PST`)
  #   - `{zoneoffset}`: time zone offset (e.g. `-0700`)
  #
  #   The timestamp is the "last aligned" time point, i.e., the current time
  #   truncated according to the specified rotation interval. For instance, given
  #   the default settings `rotation: 6 hours` and `local time: true`, the
  #   timestamps would be aligned at 00:00, 06:00, 12:00, and 18:00, local time.
  #
  #   Rotation intervals may be specified via the option `rotation` in one or
  #   two words:
  #   - An optional integer specifying the number of time units.
  #     Defaults to `1` if omitted.
  #   - One of the following time units:
  #     - `s`, `second`, `seconds`
  #     - `m`, `minute`, `minutes`
  #     - `h`, `hour`, `hours`, `hourly`
  #     - `day`, `days`, `daily`
  #     - `week`, `weeks`, `weekly`
  #     - `month`, `months`, `monthly`
  #     - `year`, `years`, `yearly`
  #     - `eternity` (never rotate)
  #
  #   By default, log files are compressed GZip once they are no longer active.
  #   This can be controlled with the option "compress after use".
  #
  #   Lastly, `expire after` can be set to prune log files once they reach a
  #   certain age, specified in the same way as `rotation` (e.g. `1 year`).
  #
  # * Log sinks that record specific fields from loggable events include
  #   "csvfile" and "sqlite3".  As, such these are suitable for recording not
  #   just text messages, but also general data collection/telemetry based
  #   on an established contract. Their settings include:
  #
  #   - `contract_id`:  If provided, only events with matching
  #    `contract_id` field will be captured by this sink.  Plaintext log
  #    messages are logged with `contract_id` set to `"text"`, which is
  #    also the default contract ID filter for the following text-based
  #    log sinks (meaning these will by default only accept text messages):
  #    `stdout`, `stderr`, `syslog`, `rti-dl`, and `dds`.
  #
  #   - `columns`: This is a sequence of column specifications,
  #     each in turn a sequence comprising three values:
  #     1. Event field to capture. This may be:
  #        - a static field such as `"timestamp"`, `"level"`, or `"text"`;
  #          use the `list_static_fields()` method to get a list.
  #        - a dynamic field passed as an event attribute, assumed to be present
  #          in log events with a matching `contract_id`.
  #     2. Column name, specifying header row or database column, respectively.
  #     3. Prefered column type; one of: `NULL`, `BOOLEAN`, `INTEGER`, `REAL`,
  #        `TEXT`, or `BLOB`. This is used by DB sinks (currently `sqlite3`) to
  #        create correspondingly-typed data columns.  It is also used to
  #        interpret fields such as `level` and `timestamp` in one way or
  #        another. (Note that if the type of the `timestamp` field set to
  #        `TEXT`, the resulting string value is also determined by the Sink's
  #        `local time` setting).
  #
  #   - `level map`: An optional key/value map to convert log level names
  #      (TRACE, DEBUG, ... FATAL) to alternate values, such as integer levels.
  #      This is mainly useful for specialized log sinks producing output
  #      inteded for specific parsers such as ones based on Python an its
  #      `logging` module.


  # Log to standard error
  stderr:
    #include context: false
    threshold: WARNING

    # Whether logging to `stderr` is enabled. Defaults to `true` if running in a terminal (tty),
    # `false` otherwise.
    # enabled: true

  # UNIX SysLog settings
  syslog:
    # Minimum log level to capture
    threshold: DEBUG

    # Include source context in message
    include context: false

    # Whether logging to the system log. Defaults to `false` if running in a terminal (tty),
    # `true` otherwise.
    # enabled: true

  # Log each event as a single-line JSON object
  jsonfile:
    # Log to JSON file enabled.  Defaults to `false`
    # enabled : false

    # Level threshold.  Events with a lower severity level will be ignored.
    threshold: TRACE

    # JSON filename template, expanded as described above.
    name template: "{executable}-{isodate}-{hour}{minute}{zoneoffset}"

    # Derive JSON log file name from local time.
    local time: true

    # How often do we want to switch to a new log file
    # Default: 6 hours
    rotate after: 6 hours

    # Compress log files once they are no longer in active use (default: true)
    #compress after use: true

    # Prune log files once they reach a certain age.
    expire after: 1 year

  # Log to plaintext `.log` files
  logfile:
    # Log to text file enabled.  Defaults to `false`.
    # enabled : true

    # Log logger threshold
    threshold: TRACE

    # Include source context in message
    include context: false

    # Logfile name template, expanded as described above.
    name template: "{executable}-{isodate}-{hour}{minute}{zoneoffset}"

    # Derive log file name from local time.
    local time : true

    # How often do we want to switch to a new log file
    # Default: 6 hours
    rotate after: 6 hours

    # Compress log files once they are no longer in active use (default: true)
    #compress after use: true

    # Prune log files once they reach a certain age.
    expire after: 1 year

  # Log specific event fields to comma-separated value files (with suffix `.csv`)
  csvfile:
    # Log to text file enabled.  Defaults to `false`.
    # enabled: true

    # Log logger threshold
    threshold: DEBUG

    # Contract ID to capture
    contract_id : "text"

    # Columns to include.
    columns:
      # Event field, optional CSV column header
      - ["timestamp", "TIME", TEXT]
      - ["host", "HOST", TEXT]
      - ["origin", "ORIGIN", TEXT]
      - ["level", "LEVEL", TEXT]
      - ["log_scope", "SCOPE", TEXT]
      - ["thread_id", "THREAD", INTEGER]
      - ["source_path", "FILE", TEXT]
      - ["source_line", "LINE", INTEGER]
      - ["function_name", "FUNCTION", TEXT]
      - ["text", "TEXT", TEXT]

    # Column separator; `","` by default
    #column separator: "\t"

    # Logfile name template, expanded as described above.
    name template: "{executable}-{isodate}-{hour}{minute}{zoneoffset}"

    # Derive log file name from local time.
    local time: true

    # How often do we want to switch to a new log file
    # Default: 6 hours
    rotate after: 1 day

    # Compress log files once they are no longer in active use (default: true)
    #compress after use: true

    # Prune log files once they reach a certain age.
    expire after: 1 year

  # Log to SQLite3 `.db` files
  sqlite3:
    # Log to text file enabled.  Defaults to `false`.
    # enabled: false

    # Log logger threshold
    threshold: DEBUG

    # Columns to include.
    columns:
      # Event field, optional column name, column type
      - ["timestamp", "timestamp", INTEGER]
      - ["host", "hostname", TEXT]
      - ["origin", "origin", TEXT]
      - ["level", "level", TEXT]
      - ["log_scope", "scope", TEXT]
      - ["thread_id", "thread", INTEGER]
      - ["source_path", "file", TEXT]
      - ["source_line", "line", INTEGER]
      - ["function_name", "function", TEXT]
      - ["text", "text", TEXT]

    # Logfile name template, expanded as described above.
    name template: "{executable}-{isodate}"

    # Derive log file name from local time.
    local time: true

    # How often do we want to switch to a new log file
    # Default: 6 hours
    rotate after: 1 week

    # Compress log files once they are no longer in active use (default: true)
    #compress after use: true

    # Prune log files once they reach a certain age.
    expire after: 1 year

    # Contract ID to capture
    contract_id: "text"

  # Log via RTI distributed logger (if built with option `USE_RTI_DISTRIBUTED_LOGGER`)
  rti-dl:
    enabled: false
    threshold: TRACE

  # Log via DDS (Topic `cc::status::LogEvent`)
  dds:
    enabled: false
    threshold: TRACE


  # Log via MultiLogger gRPC service
  multilogger:
    # MultiLogger sink enabled.  Default: false
    enabled: true

    # MultiLogger host. Default: localhost
    host: localhost
