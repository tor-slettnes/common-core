// -*- Protocol-Buffers -*-
//==============================================================================
/// @file variant.proto
/// @brief ProtoBuf message types for Common Core variant values
/// @author Tor Slettnes <tor@slett.net>
//==============================================================================

syntax = "proto3";

package cc.variant;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message Complex
{
    double real = 1;
    double imag = 2;
}

// Container for a generic value, and optionally a tag.
//
// * The value is either of the following:
//   - one of the following basic types: boolean, signed/unsigned integer, real number, string, byte sequence
//   - one of the following well-known types: Timestamp, Duration
//   - a ValueList instance, declared below, containing nested Value instances.
//
// * The tag is optional, and is typically used when the value is part of a
//   ValueList represeting an ordered tag/value sequence or a key/value map
//   ("dictionary" in Python).
//
// Though outside the scope of this definition, when translating the value to
// JSON, e.g. for logging, the following conventions are *recommended*:
// * a timestamp should be represented as a string in JavaScript-compliant ISO format:
//   `yyyy-mm-ddThh:mm:ssZ`. Note that the trailing `Z` implies "zero offset" from UTC.
// * a duration should be represented as a real number, denoting seconds.
// * a string should be represented with UTF-8 character encoding, particularly over the wire.
// * a byte sequence should be represented as a base64-encoded string.
// * a ValueList item must be either `untagged` or `mappable` (may be determined implicitly):
//   - An `untagged` ValueList can be represented as a JSON *array*
//   - A `mappable` ValueList can be represented as a JSON *object*
//   - Any other ValueList cannot be represented unambiguously with JSON.

message Value {
    // Data tag when used in TagValueList, or key for KeyValueMap.
    // Not present for items in a ValueList.
    string tag = 1;

    oneof value {
        // Scalar types
        bool value_bool  = 4;
        uint64 value_uint = 5;
        sint64 value_sint = 6;
        double value_real = 7;
        string value_string = 8;
        bytes value_bytes = 9;
        google.protobuf.Timestamp value_timestamp = 10;
        google.protobuf.Duration value_duration = 11;
        Complex value_complex = 12;

        // Nested tag/value container
        ValueList value_list = 15;
    }
}

// A sequence of Value items.  This can be used to represent:
// * a plain list of (untagged) values, where there should be no tags present
// * ordered tag/value pairs, where the tags need not exist for every item nor be unique
// * key/value map ("dictionary" in Python) where every value has a unique key.

message ValueList {
    repeated Value items = 1;

    oneof hints
    {
        bool untagged = 4;      // No tags are present (values can be stored in vector)
        bool mappable = 5;      // Tags are present and unique (values are mappable)
    }
}
