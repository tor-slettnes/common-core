// -*- Protocol-Buffers -*-
//==============================================================================
/// @file request_reply.proto
/// @brief Envelope for Request/Reply pattern over Pub/Sub schemes like ZMQ
/// @note Not applicable with gRPC
/// @author Tor Slettnes <tor@slett.net>
//==============================================================================

syntax = "proto3";

package cc.protobuf.rr;

import "variant.proto";
import "status.proto";

//==============================================================================
// Request

message Request
{
    // Optional enumeration of unique client instances within a message channel.
    // This will be included in corresponding Reply messages.
    uint64 client_id = 1;

    // Enumeration of request instance within the same client instance.
    // This will be included in corresponding Reply messages.
    uint64 request_id = 2;

    // Optional service name to direct request within a message channel.
    string interface_name = 4;

    // Method name to handle request within a specfic service.
    string method_name = 5;

    // Input parameter(s).
    Parameter param = 7;
}


//==============================================================================
// Reply

message Reply
{
    // Enumeration of unique client instances within the same message channel
    uint64 client_id = 1;

    // Enumeration of request instance within the same client instance
    uint64 request_id = 2;

    // Request status
    Status status = 3;

    // Response parameter(s).
    Parameter param = 7;
}

//==============================================================================
// I/O parameters

message Parameter
{
    oneof param
    {
        bytes serialized_proto = 8;      // Serialized ProtoBuf message
        variant.Value variant_value = 9; // Variant value (possibly nested)
    }
}


//==============================================================================
// StatusCode

enum StatusCode
{
    STATUS_OK        = 0;       // Request completed successfully
    STATUS_ACCEPTED  = 1;       // Request is accepted, but not yet completed
    STATUS_INVALID   = 2;       // Request could not be performed
    STATUS_CANCELLED = 3;       // Request was cancelled
    STATUS_FAILED    = 4;       // Request could not complete
};

//==============================================================================
// Status

message Status
{
    /// Overall status of request
    StatusCode code = 1;

    /// Additional details for invalid/cancelled/failed requests
    status.Event details = 2;
};
