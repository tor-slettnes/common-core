/// -*- c++ -*-
//==============================================================================
/// @file signaltemplate.i++
/// @brief Adaptation of Signal/Slot pattern - inline functions
/// @author Tor Slettnes <tor@slett.net>
//==============================================================================

namespace core::signal
{
    //==========================================================================
    // @class DataSignal

    template <class DataType>
    inline DataSignal<DataType>::DataSignal(
        const std::string &id,
        bool caching)
        : Super(id, caching)
    {
    }

    template <class DataType>
    inline Handle DataSignal<DataType>::connect(
        const Slot &slot)
    {
        Handle handle(this->unique_handle());
        this->connect(handle, slot);
        return handle;
    }

    template <class DataType>
    inline void DataSignal<DataType>::connect(
        const Handle &handle,
        const Slot &slot)
    {
        std::scoped_lock lck(this->signal_mtx_);
        this->slots_[handle] = slot;
        this->emit_cached_to(handle, slot);
    }

    template <class DataType>
    inline void DataSignal<DataType>::disconnect(
        const Handle &handle)
    {
        std::scoped_lock lck(this->signal_mtx_);
        this->slots_.erase(handle);
    }

    template <class DataType>
    inline std::size_t DataSignal<DataType>::emit(
        const DataType &value)
    {
        std::scoped_lock lck(this->signal_mtx_);
        if (this->caching_)
        {
            this->update_cache(value);
        }
        return this->sendall(value);
    }

    template <class DataType>
    inline std::size_t DataSignal<DataType>::emit_if_changed(
        const DataType &value)
    {
        std::scoped_lock lck(this->signal_mtx_);
        if (!this->caching_ || !this->cached_ || !(value == *this->cached_))
        {
            if (this->caching_)
            {
                this->update_cache(value);
            }
            return this->sendall(value);
        }
        else
        {
            return 0;
        }
    }

    template <class DataType>
    inline std::optional<DataType> DataSignal<DataType>::get_cached()
    {
        std::scoped_lock lck(this->signal_mtx_);
        return this->cached_;
    }

    template <class DataType>
    inline DataType DataSignal<DataType>::get_cached(
        const DataType &fallback)
    {
        return this->get_cached().value_or(fallback);
    }

    template <class DataType>
    inline bool DataSignal<DataType>::clear_cached()
    {
        std::scoped_lock lck(this->signal_mtx_);
        bool exists = this->cached_.has_value();
        this->cached_.reset();
        return exists;
    }

    template <class DataType>
    inline std::size_t DataSignal<DataType>::connection_count() const
    {
        return this->slots_.size();
    }

    template <class DataType>
    inline void DataSignal<DataType>::emit_cached_to(
        const Handle &handle,
        const Slot &slot)
    {
        if (this->cached_.has_value())
        {
            this->callback(handle, slot, this->cached_.value());
        }
    }

    template <class DataType>
    inline std::size_t DataSignal<DataType>::sendall(
        const DataType &value)
    {
        std::size_t count = 0;
        for (const auto &[receiver, method] : this->slots_)
        {
            count += this->callback(receiver, method, value);
        }
        return count;
    }

    template <class DataType>
    inline void DataSignal<DataType>::update_cache(
        const DataType &value)
    {
        this->cached_ = value;
    }

    template <class DataType>
    inline bool DataSignal<DataType>::callback(
        const std::string &receiver,
        const Slot &method,
        const DataType &value)
    {
        return this->safe_invoke(str::format("%s({...})", receiver),
                                 std::bind(method, value));
    }

    //==========================================================================
    // @class MappingSignal

    template <class DataType, class KeyType>
    inline MappingSignal<DataType, KeyType>::MappingSignal(
        const std::string &id,
        bool caching)
        : Super(id, caching)
    {
    }

    template <class DataType, class KeyType>
    inline Handle MappingSignal<DataType, KeyType>::connect(
        const Slot &slot)
    {
        Handle handle(this->unique_handle());
        this->connect(handle, slot);
        return handle;
    }

    template <class DataType, class KeyType>
    inline void MappingSignal<DataType, KeyType>::connect(
        const Handle &handle,
        const Slot &slot)
    {
        std::scoped_lock lck(this->signal_mtx_);
        this->slots_[handle] = slot;
        this->emit_cached_to(handle, slot);
    }

    template <class DataType, class KeyType>
    inline void MappingSignal<DataType, KeyType>::disconnect(
        const Handle &handle)
    {
        std::scoped_lock lck(this->signal_mtx_);
        this->slots_.erase(handle);
    }

    template <class DataType, class KeyType>
    inline std::size_t MappingSignal<DataType, KeyType>::emit(
        MappingAction mapping_action,
        const KeyType &mapping_key,
        const DataType &value)
    {
        std::scoped_lock lck(this->signal_mtx_);
        if (this->caching_)
        {
            switch (mapping_action)
            {
            case MAP_UPDATE:
            case MAP_ADDITION:
                this->update_cache(mapping_key, value);
                break;

            case MAP_REMOVAL:
                this->cached_.erase(mapping_key);
                break;

            default:
                break;
            }
        }
        return this->sendall(mapping_action, mapping_key, value);
    }

    template <class DataType, class KeyType>
    inline std::size_t MappingSignal<DataType, KeyType>::emit(
        const KeyType &mapping_key,
        const DataType &value)
    {
        MappingAction action(
            !this->caching_                ? MAP_UPDATE
            : this->is_cached(mapping_key) ? MAP_UPDATE
                                           : MAP_ADDITION);

        return this->emit(action, mapping_key, value);
    }

    template <class DataType, class KeyType>
    inline std::size_t MappingSignal<DataType, KeyType>::emit_if_changed(
        const KeyType &key,
        const DataType &value)
    {
        std::scoped_lock lck(this->signal_mtx_);
        MappingAction action(
            !this->caching_                     ? MAP_NONE
            : (this->cached_.count(key) == 0)   ? MAP_ADDITION
            : !(this->cached_.at(key) == value) ? MAP_UPDATE
                                                : MAP_NONE);
        if (action != MAP_NONE)
        {
            this->update_cache(key, value);
            return this->sendall(action, key, value);
        }
        else
        {
            return 0;
        }
    }

    template <class DataType, class KeyType>
    inline std::size_t MappingSignal<DataType, KeyType>::clear(
        const KeyType &key,
        const DataType &value)
    {
        return this->emit(MAP_REMOVAL, key, value);
    }

    template <class DataType, class KeyType>
    inline std::size_t MappingSignal<DataType, KeyType>::clear_if_cached(
        const KeyType &key)
    {
        std::scoped_lock lck(this->signal_mtx_);
        if (auto nh = this->cached_.extract(key))
        {
            return this->sendall(MAP_REMOVAL, key, nh.mapped());
        }
        else
        {
            return 0;
        }
    }

    template <class DataType, class KeyType>
    inline std::size_t MappingSignal<DataType, KeyType>::clear_all_cached()
    {
        std::scoped_lock lck(this->signal_mtx_);
        std::size_t count = 0;
        for (const auto &[key, value] : this->cached_)
        {
            count += this->sendall(MAP_REMOVAL, key, {});
        }
        this->cached_.clear();
        return count;
    }

    template <class DataType, class KeyType>
    inline std::unordered_map<KeyType, DataType> MappingSignal<DataType, KeyType>::get_cached()
    {
        std::scoped_lock lck(this->signal_mtx_);
        return this->cached_;
    }

    template <class DataType, class KeyType>
    inline std::optional<DataType> MappingSignal<DataType, KeyType>::get_cached(
        const std::string &key)
    {
        std::scoped_lock lck(this->signal_mtx_);
        try
        {
            return this->cached_.at(key);
        }
        catch (const std::out_of_range &e)
        {
            return {};
        }
    }

    template <class DataType, class KeyType>
    inline DataType MappingSignal<DataType, KeyType>::get_cached(
        const std::string &key,
        const DataType &fallback)
    {
        return this->get_cached(key).value_or(fallback);
    }

    template <class DataType, class KeyType>
    inline bool MappingSignal<DataType, KeyType>::is_cached(
        const std::string &key) noexcept
    {
        std::scoped_lock lck(this->signal_mtx_);
        return this->cached_.count(key);
    }

    template <class DataType, class KeyType>
    inline std::size_t MappingSignal<DataType, KeyType>::cache_size()
    {
        std::scoped_lock lck(this->signal_mtx_);
        return this->cached_.size();
    }

    template <class DataType, class KeyType>
    inline std::size_t MappingSignal<DataType, KeyType>::connection_count() const
    {
        return this->slots_.size();
    }

    template <class DataType, class KeyType>
    template <class MapType>
    inline std::size_t MappingSignal<DataType, KeyType>::synchronize(
        const MapType &update)
    {
        std::unordered_map<KeyType, DataType> previous = this->get_cached();
        std::size_t count = 0;
        for (const auto &[key, value] : update)
        {
            if (auto nh = previous.extract(key))
            {
                if (nh.mapped() != value)
                {
                    this->emit(MAP_UPDATE, key, value);
                    count++;
                }
            }
            else
            {
                this->emit(MAP_ADDITION, key, value);
                count++;
            }
        }
        for (const auto &[key, value] : previous)
        {
            this->emit(MAP_REMOVAL, key, value);
            count++;
        }
        return count;
    }

    template <class DataType, class KeyType>
    inline void MappingSignal<DataType, KeyType>::update_cache(
        const KeyType &key,
        const DataType &value)
    {
        this->cached_.insert_or_assign(key, value);
    }

    template <class DataType, class KeyType>
    inline void MappingSignal<DataType, KeyType>::emit_cached_to(
        const Handle &handle,
        const Slot &callback)
    {
        for (const auto &pair : this->cached_)
        {
            this->callback(handle, callback, MAP_ADDITION, pair.first, pair.second);
        }
    }

    template <class DataType, class KeyType>
    inline std::size_t MappingSignal<DataType, KeyType>::sendall(
        MappingAction mapping_action,
        const KeyType &mapping_key,
        const DataType &value)
    {
        std::size_t count = 0;
        for (const auto &[receiver, method] : this->slots_)
        {
            count += this->callback(receiver, method, mapping_action, mapping_key, value);
        }
        return count;
    }

    template <class DataType, class KeyType>
    inline bool MappingSignal<DataType, KeyType>::callback(
        const std::string &receiver,
        const Slot &method,
        MappingAction mapping_action,
        const KeyType &mapping_key,
        const DataType &value)
    {
        return this->safe_invoke(
            str::format("%r (%r, %r, {...})", receiver, mapping_action, mapping_key),
            std::bind(method, mapping_action, mapping_key, value));
    }

    //==========================================================================
    // I/O stream support

    inline std::ostream &operator<<(std::ostream &stream, MappingAction mapping_action)
    {
        static const std::unordered_map<MappingAction, std::string> names = {
            {MAP_NONE, "MAP_NONE"},
            {MAP_ADDITION, "MAP_ADDITION"},
            {MAP_REMOVAL, "MAP_REMOVAL"},
            {MAP_UPDATE, "MAP_UPDATE"},
        };

        try
        {
            stream << names.at(mapping_action);
        }
        catch (const std::out_of_range &)
        {
            stream << str::format("(Invalid MappingAction %d)",
                                  static_cast<uint>(mapping_action));
        }

        return stream;
    }

}  // namespace core::signal
