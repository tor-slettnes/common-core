/// -*- c++ -*-
//==============================================================================
/// @file builder.i++
/// @brief Encode variant values as rapidjson objects
/// @author Tor Slettnes <tor@slett.net>
//==============================================================================

namespace core::json
{
    template <class WriterType>
    RapidBuilder<WriterType>::RapidBuilder(std::ostream &stream)
        : Super(stream),
          streamwrapper(stream),
          writer(streamwrapper)
    {
    }

    template <class WriterType>
    void RapidBuilder<WriterType>::write_stream(const types::Value &value)
    {
        this->encode_value(value);
        this->stream << std::endl;
    }

    template <class WriterType>
    bool RapidBuilder<WriterType>::encode_value(const types::Value &value)
    {
        static bool warned_tv = false;

        switch (value.type())
        {
        case types::ValueType::NONE:
            return this->writer.Null();

        case types::ValueType::BOOL:
            return this->writer.Bool(value.as_bool());

        case types::ValueType::CHAR:
            return this->writer.String(value.get_if<char>(), 1);

        case types::ValueType::STRING:
            return this->writer.String(value.get<std::string>());

        case types::ValueType::UINT:
            return this->writer.Uint64(value.as_uint());

        case types::ValueType::SINT:
            return this->writer.Int64(value.as_sint());

        case types::ValueType::REAL:
        case types::ValueType::TIMEPOINT:
        case types::ValueType::DURATION:
            return this->writer.Double(value.as_real());

        case types::ValueType::COMPLEX:
            return this->encode_object(value.as_kvmap());

        case types::ValueType::BYTEVECTOR:
            return this->writer.String(value.get<types::ByteVector>().to_base64());

        case types::ValueType::VALUELIST:
            return this->encode_array(*value.get_valuelist());

        case types::ValueType::KVMAP:
            return this->encode_object(*value.get_kvmap());

        case types::ValueType::TVLIST:
            if (types::TaggedValueListPtr tvlist = value.get_tvlist())
            {
                if (tvlist->mappable())
                {
                    return this->encode_object(*tvlist);
                }
                else
                {
                    // if (!warned_tv && tvlist->tagged())
                    // {
                    //     logf_warning(
                    //         "TaggedValueList contains tags, but they are not unique. "
                    //         "Encoding as JSON array, losing tags: %s",
                    //         value);
                    //     warned_tv = true;
                    // }
                    return this->encode_array(tvlist->values());
                }
            }
            else
            {
                return this->writer.Null();
            }

        default:
            // logf_warning("%s cannot be converted to JSON: %s",
            //              value.type_name(),
            //              value);
            return this->writer.Null();
        }
    }

    template <class WriterType>
    bool RapidBuilder<WriterType>::encode_array(const types::ValueList &list)
    {
        this->writer.StartArray();
        for (const types::Value &v : list)
        {
            this->encode_value(v);
        }
        return this->writer.EndArray();
    }

    template <class WriterType>
    bool RapidBuilder<WriterType>::encode_object(const types::KeyValueMap &kvmap)
    {
        this->writer.StartObject();

        for (const auto &[k, v] : kvmap)
        {
            this->writer.String(k);
            this->encode_value(v);
        }
        return this->writer.EndObject();
    }

    template <class WriterType>
    bool RapidBuilder<WriterType>::encode_object(const types::TaggedValueList &tvlist)
    {
        this->writer.StartObject();

        for (const auto &[t, v] : tvlist)
        {
            if (t)
            {
                this->writer.String(*t);
                this->encode_value(v);
            }
        }
        return this->writer.EndObject();
    }
}  // namespace core::json
