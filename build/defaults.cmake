## -*- cmake -*-
#===============================================================================
## @file defaults.cmake
## @brief Miscellanous build configuration
##
## Define some defaults variables to control the build outputs.  These can be
## overridden with `cmake` arguments (`cmake -D VARIABLE=VALUE ...`), or
## indirectly as `make` overrides (`make VARIABLE=VALUE ...`). They are also
## presented as options in `cmake-gui`. Either way, such overrides are cached
## for future invocations.
##
## To make local persistent changes, do not edit this file, since you may
## unintentionally commit these to Git.  Instead, put your customizations in
## your own `local.cmake` file in this folder; as that file is listed in
## `.gitignore` it won't be committed.  For your custom setting to take effect
## you may need to use a plain `set()` invocation without the CACHE option, or
## add the `FORCE` option, or else clean the CMake cache before rebuilding.
## For details, see <https://cmake.org/cmake/help/latest/command/set.html>
## and <https://cmake.org/cmake/help/latest/command/option.html>.
#===============================================================================

#-------------------------------------------------------------------------------
# Build information

### Set default product name if not provided
set(PRODUCT "platform"
  CACHE STRING "Product name. Used to select build configurations")

set(PROJECT "common-core"
  CACHE STRING "Top-level project name. Used to look up some run-time service settings")

set(DESCRIPTION "Cross-platform development framework for embedded microservice applications"
  CACHE STRING "Project description")

set(HOME_PAGE "https://github.com/tor-slettnes/common-core/"
  CACHE STRING "Project home page.")

set(ORGANIZATION "common-core"
  CACHE STRING "Organization name, for use in various path names")

#-------------------------------------------------------------------------------
# Various directories

set(CC_PROTOS_BASE_DIR "${CMAKE_SOURCE_DIR}/protos"
  CACHE STRING "Root directory for common `.proto` files")

set(DATA_DIR "share/${ORGANIZATION}"
  CACHE STRING "Target directory for shared data")

set(SETTINGS_DIR "${DATA_DIR}/settings"
  CACHE STRING "Top-level installation directory for settings files")

set(LOCAL_SETTINGS_DIR "/etc/${ORGANIZATION}"
  CACHE STRING "Directory for local/host-specific settings files")

set(LOCAL_DATA_DIR "/data/${ORGANIZATION}"
  CACHE STRING "Directory for local/generated data files")

set(LOGS_DIR "/var/log/${ORGANIZATION}"
  CACHE STRING "Directory for generated log files")


#-------------------------------------------------------------------------------
# Software upgrade settings (via `Upgrade` service)

set(UPGRADE_PACKAGE_SUFFIX ".ccpkg"
  CACHE STRING "Filename suffix for upgrade packages; used when scanning local folders")

set(UPGRADE_SCAN_URL "https://slett.net/common-core/package-index.json"
  CACHE STRING "Location of package index; used to periodically scan for upgrades")

set(UPGRADE_VFS_CONTEXT "releases"
  CACHE STRING "VirtualFileSystem context in which to periodically scan for upgrade packages")

set(UPGRADE_KEYRING "common-core-release.kbx"
  CACHE STRING "Filename containing public GnuPG key used to validate package signagture")

#-------------------------------------------------------------------------------
# Package generation with CPack. For information about grouping, see
# https://cmake.org/cmake/help/latest/module/CPackComponent.html#add-component-group

option(DEB_SPLIT_BY_COMPONENT
  "Create one installation package per component"
  TRUE)

option(DEB_SPLIT_BY_GROUP
  "Create one installation package per component group"
  FALSE)

set(PACKAGE_NAME_PREFIX "cc"
  CACHE STRING "Base name for installable packages. Component or group name may be appended to this")

set(PACKAGE_ORGANIZATION "Common Core Authors"
  CACHE STRING "Name of issuing organization")

set(PACKAGE_CONTACT "Tor Slettnes <tor@slett.net>"
  CACHE STRING "Package contact/maintainer")

#-------------------------------------------------------------------------------
# Python code tweaks

set(PYTHON_NAMESPACE "cc"
  CACHE STRING "Top-level package/namespace for Python modules")

set(PYTHON_GENERATED_NAMESPACE ""
  CACHE STRING "Namespace for generated Python modules (e.g. ProtoBuf)")

set(PYTHON_PIP_CORE_REQUIREMENTS_FILE
  "${CMAKE_CURRENT_LIST_DIR}/pip-requirements.txt"
  CACHE FILEPATH
  "File containing required PIP-installable packages for virtual environment")

set(PYTHON_INSTALL_DIR "lib/python3/dist-packages"
  CACHE STRING "Top-level installation directory for Python modules")

set(PYTHON_WHEEL_NAME_PREFIX "${PACKAGE_NAME_PREFIX}_"
  CACHE STRING "Default name prefix for generated Python distribution packages")

set(PYTHON_WHEELS_INSTALL_DIR "${DATA_DIR}/python-wheels"
  CACHE STRING "Folder on target in which to place Python wheels")

set(PYTHON_VENV "${CMAKE_BINARY_DIR}/python/venv"
  CACHE PATH "Folder in which to create a local Python virtual environment")

set(PYTHON_VENV_ROOT "/var/lib/${ORGANIZATION}/venv"
  CACHE STRING "Folder on target in which Python virtual environments are created")


#-------------------------------------------------------------------------------
# How detailed output do we want during the build?
# For available levels, see https://cmake.org/cmake/help/latest/command/message.html.

set(VERBOSITY ""
  CACHE STRING "Message verbosity during build")
set_property(CACHE VERBOSITY
  PROPERTY STRINGS
  "TRACE" "DEBUG" "VERBOSE" "STATUS" "NOTICE"
  "DEPRECATION" "AUTHOR_WARNING" "WARNING" "SEND_ERROR" "FATAL_ERROR")

if(VERBOSITY)
  set(CMAKE_MESSAGE_LOG_LEVEL ${VERBOSITY})
endif()

#-------------------------------------------------------------------------------
# Miscellaneous build options

include(CMakeDependentOption)

# Build tests
option(BUILD_TESTING
  "Build testing modules"
  ON)

# Enable SystemD service integration
option(ENABLE_SERVICES
  "Enable SystemD service units"
  ON)

# What applications to build/install.
option(BUILD_SHARED
  "Install shared artifacts (e.g. common settings)"
  ON)

cmake_dependent_option(BUILD_DEMO
  "Build/install DEMO application example"
  ON "BUILD_SHARED"
  OFF)

cmake_dependent_option(BUILD_PLATFORM
  "Build/install Platform services"
  ON "BUILD_SHARED"
  OFF)

cmake_dependent_option(BUILD_MULTILOGGER
  "Build/install MultiLogger service"
  ON "BUILD_SHARED"
  OFF)

cmake_dependent_option(BUILD_SWITCHBOARD
  "Build/install Switchboard application"
  ON "BUILD_SHARED"
  OFF)

#-------------------------------------------------------------------------------
# C++ options

option(BUILD_CPP          "Build/Install C++ code"  ON)
option(BUILD_ALL_LIBS     "Build all libraries even if not used (to validate syntax)" OFF)
option(BUILD_ALL_BINARIES "Build all executables even if not used (to validate syntax)" OFF)

# Settings parsers
option(BUILD_RAPIDJSON    "Build fast JSON parsing using RapidJSON" ON)
option(BUILD_YAML         "Build support for YAML parsing" ON)

# Messaging frameworks
option(BUILD_KAFKA        "Build support for Apache Kafka" ON)
option(BUILD_GRPC         "Build support for gRPC Remote Procedure Calls" ON)
option(BUILD_ZMQ          "Build support for ZeroMQ" ON)
option(BUILD_HTTP         "Build support for HTTP requests, incl. REST API" ON)
option(BUILD_DDS          "Build support for Distributed Data Service (DDS)" OFF)

cmake_dependent_option(BUILD_RTI_DDS
  "Build support for RTI ConnextDDS"
  ON "BUILD_DDS"
  OFF)

cmake_dependent_option(BUILD_RTI_LOGGER
  "Build support for RTI Distributed Logger"
  ON "BUILD_RTI_DDS"
  OFF)

# Object serialization
option(BUILD_SQLITE3      "Build support for SQLite3 DB" ON)
option(BUILD_AVRO         "Build support for Apache AVRO" ${BUILD_KAFKA})
option(BUILD_PROTOBUF     "Build support for Google Protocol Buffers" ON)
option(BUILD_PYTHON_IO    "Build Python embedded environment for C++" ON)

# Platform integration
option(BUILD_DBUS         "Build support for D-Bus" ON)
option(BUILD_DNSSD_AVAHI  "Build suport for DNS-SD via Avahi" ON)

#-------------------------------------------------------------------------------
# Python options

option(BUILD_PYTHON               "Build and install Python components" ON)
option(INSTALL_PYTHON_MODULES     "Install Python source modules directly on target" ON)
option(INSTALL_PYTHON_EXECUTABLES "Build and add Python executables with PyInstaller" OFF)
option(INSTALL_PYTHON_WHEELS      "Build and add Python distribution files (`.whl`)" OFF)

cmake_dependent_option(INSTALL_PYTHON_REQUIREMENTS
  "Fetch and add required upstream distribution files"
  ON INSTALL_PYTHON_WHEELS
  OFF)
